# -*- coding: utf-8 -*-
"""SleepLab_ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17vw3Mg67zS2cff6D7IoI6qACANJgjA7k

# **SleepLab: Your 24/7 Sleep Companion**

---

### *Machine Learning Model - Neural Network*

## **Import Libraries**
"""

import pandas as pd
import numpy as np
import random
import matplotlib.pyplot as plt
import sklearn
import keras
import tensorflow as tf

from keras.models import Sequential
from keras.layers import Dense
from keras.callbacks import EarlyStopping
from keras.callbacks import ModelCheckpoint
from keras.models import load_model

from numpy import ndarray
from sklearn.metrics import confusion_matrix, roc_curve, auc, roc_auc_score, accuracy_score, classification_report
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from keras.models import model_from_json
import json

"""## **Import Dataset**"""

df = pd.read_csv('https://raw.githubusercontent.com/abdulrohman19/SleepLab/machine-learning/Data/dataset.csv')
print(df)

"""## **Data Preprocessing**"""

#Extract the target variable
dftarget = df['Sleep Disorder']

#Convert to NumPy array
target = dftarget.to_numpy()

#Remove the column from the DataFrame
df = df.drop(columns=['Sleep Disorder'])

#Convert the modified DataFrame to a NumPy array, representing the features
data = df.to_numpy()

"""**Split dataset into training and testing**"""

#Split the dataset into training (80%) and testing (20%) sets
X_train, X_test, y_train, y_test = train_test_split(data, target, test_size=0.2)

print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

"""**Normalization**"""

#Creating a StandardScaler object
s = StandardScaler()

#Normalizing the features in the 'data' array
data = s.fit_transform(data)

print(data)

"""## **Create and Train the Model**"""

# Define the model
model = tf.keras.models.Sequential([
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation=tf.nn.relu),
    tf.keras.layers.Dense(3, activation=tf.nn.softmax)
    ])

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Set up EarlyStopping callback
early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)

# Fit the model with validation data and EarlyStopping callback
history = model.fit(X_train, y_train, epochs=100, validation_data=(X_test, y_test), callbacks=[early_stopping])

"""**Review the architecture**"""

model.summary()

"""## **Model Evaluation**"""

def plot_training_history(history):
    # Plot training loss
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.plot(history.history['loss'], label='Training Loss')
    plt.plot(history.history['val_loss'], label='Validation Loss')
    plt.xlabel('Epochs')
    plt.ylabel('Loss')
    plt.legend()

    # Plot training accuracy
    plt.subplot(1, 2, 2)
    plt.plot(history.history['accuracy'], label='Training Accuracy')
    plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
    plt.xlabel('Epochs')
    plt.ylabel('Accuracy')
    plt.legend()

    plt.show()

#Plot training loss and accuracy
plot_training_history(history)

"""**Evaluate the model on the test set**"""

val_loss, val_acc = model.evaluate(X_test, y_test)
print(f"\nValidation Loss: {val_loss}, Validation Accuracy: {val_acc}")

"""## **Make Predictions**"""

#Make a prediction using the model
sleep_disorder = model.predict([[6.1, 90, 2]])

#Round the predicted probabilities
rounded_sleep_disorder = np.round(sleep_disorder)

#Find the predicted class by taking the index of the maximum probability
predicted_class = int(rounded_sleep_disorder.argmax(axis=-1))

#Print the prediction results
print("Predicted Sleep Disorder: ", sleep_disorder)
print("Predicted Sleep Disorder: ", rounded_sleep_disorder)
print("Predicted Sleep Disorder: ", predicted_class)

"""## **Save the Model**

**Json format**
"""

model_json = trained_model.to_json()
with open("sleeplab.json", "w") as json_file:
    json_file.write(model_json)

history_dict = history.history
with open("training_history.json", "w") as json_file:
    json.dump(history_dict, json_file)

"""**h5 format**"""

model.save("sleeplab.h5")
